// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from muse_file.djinni

#import <Foundation/Foundation.h>

/**
 * A File interface.  Normally you will not need to use this class directly as you can
 * get a
 * \if ANDROID_ONLY
 * MuseFileReader
 * \elseif IOS_ONLY
 * ::IXNMuseFileReader
 * \endif
 * or
 * \if ANDROID_ONLY
 * MuseFileWriter
 * \elseif IOS_ONLY
 * ::IXNMuseFileWriter
 * \endif
 * using
 * \if ANDROID_ONLY
 * MuseFileFactory
 * \elseif IOS_ONLY
 * ::IXNMuseFileFactory
 * \endif
 * <br>  If you provide
 * your own implementation of this class, you should provide a way to specify the
 * path to the file you want to access in a platform specific way.<br>
 *
 * <B>Threading</B>
 * \if ANDROID_ONLY
 * MuseFile
 * \elseif IOS_ONLY
 * ::IXNMuseFile
 * \endif
 * is not thread safe by default, but
 * \if ANDROID_ONLY
 * MuseFileWriter
 * \elseif IOS_ONLY
 * ::IXNMuseFileWriter
 * \endif
 * provides the necessary synchronization for its usage.  If you are using
 * \if ANDROID_ONLY
 * MuseFile
 * \elseif IOS_ONLY
 * ::IXNMuseFile
 * \endif
 * outside of
 * that context, make sure the calls to the
 * \if ANDROID_ONLY
 * open(), write() and close()
 * \elseif IOS_ONLY
 * IXNMuseFile::open:, IXNMuseFile::write: and IXNMuseFile::close:
 * \endif
 * functions are thread-safe.
 */

@protocol IXNMuseFile

/**
 * Opens/creates the file.  You can open same file for both writing and
 * reading if you really (!) have to do so. Provide synchronization in
 * this case.
 * This method is called automatically when
 * \if ANDROID_ONLY
 * MuseFileWriter
 * \elseif IOS_ONLY
 * ::IXNMuseFileWriter
 * \endif
 * or
 * \if ANDROID_ONLY
 * MuseFileReader
 * \elseif IOS_ONLY
 * ::IXNMuseFileReader
 * \endif
 * is created.
 * \param forWriting \c true if the file should be opened for writing, \c false if for reading.
 * \return \c true when file is opened successfully, \c false otherwise.
 */
- (BOOL)open:(BOOL)forWriting;

/**
 * Writes buffer to file. <br>
 * This method is called when you flush
 * \if ANDROID_ONLY
 * MuseFileWriter
 * \elseif IOS_ONLY
 * ::IXNMuseFileWriter
 * \endif
 * buffer
 * \param buffer The data to write.
 * \return \c true when buffer is written to successfully, \c false otherwise.
 */
- (BOOL)write:(nonnull NSData *)buffer;

/**
 * Reads "length" bytes from file starting from current pointer position.
 * \param length The number of bytes to read.
 * \return A byte array containing the data read.  An empty buffer is returned if
 * the file is empty or if the end of file was reached.
 */
- (nonnull NSData *)read:(int32_t)length;

/**
 * Closes opened file. <br>
 * This method is called when
 * \if ANDROID_ONLY
 * MuseFileWriter
 * \elseif IOS_ONLY
 * ::IXNMuseFileWriter
 * \endif
 * or
 * \if ANDROID_ONLY
 * MuseFileReader
 * \elseif IOS_ONLY
 * ::IXNMuseFileReader
 * \endif
 * is destroyed, or when close is called on either class.
 * \param forWriting \c true if the file should be closed for writing, \c false if for reading.
 * \return \c true if file is closed properly, \c false otherwise.
 */
- (BOOL)close:(BOOL)forWriting;

@end
