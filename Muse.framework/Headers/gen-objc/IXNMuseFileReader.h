// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from muse_file.djinni

#import "Muse/gen-objc/IXNAnnotationData.h"
#import "Muse/gen-objc/IXNComputingDeviceConfiguration.h"
#import "Muse/gen-objc/IXNDspData.h"
#import "Muse/gen-objc/IXNMessageType.h"
#import "Muse/gen-objc/IXNResult.h"
#import <Foundation/Foundation.h>
@class IXNMuseConfiguration;
@class IXNMuseDataPacket;
@class IXNMuseFileReader;
@class IXNMuseVersion;
@protocol IXNMuseFile;

/**
 * Reads a .muse file formatted according to the %Muse protobuf schema.
 * For information about the .muse file format see: http://developer.choosemuse.com/file-formats/muse
 * <br>
 * When the file reader is created it always starts reading from the beginning
 * of the file to the end.<br>
 *
 * <B>Threading:</B> It is NOT thread safe, you have to provide your own
 * synchronization mechanism if you plan to calls methods of this class from
 * different threads.
 */

@interface IXNMuseFileReader : NSObject

/**
 * Returns an instance of file reader. Automatically opens a file. <br>
 * \return a
 * \if ANDROID_ONLY
 * MuseFileReader
 * \elseif IOS_ONLY
 * ::IXNMuseFileReader
 * \endif
 * instance.
 */
+ (nullable IXNMuseFileReader *)getFileReader:(nullable id<IXNMuseFile>)file;

/**
 * Opens an existing file
 * Use this method if you explicitly closed file and want to open it again.
 * Calls
 * \if ANDROID_ONLY
 * MuseFile.open()
 * \elseif IOS_ONLY
 * ::IXNMuseFile::open:
 * \endif
 */
- (BOOL)open;

/**
 * Closes the file. Calls
 * \if ANDROID_ONLY
 * MuseFile.close()
 * \elseif IOS_ONLY
 * ::IXNMuseFile::close:
 * \endif
 * You don't have to call close explicitly unless you want to close file
 * immediately. close is called automatically, when the file reader object
 * is destroyed.
 */
- (BOOL)close;

/**
 * Reads the next message in the protobuf stream.<br>
 * \return The
 * \if ANDROID_ONLY
 * Result
 * \elseif IOS_ONLY
 * IXNResult
 * \endif
 * object with the status of the read operation.
 */
- (nonnull IXNResult *)gotoNextMessage;

/**
 * Returns the type of message at the current position in the file.
 * \return The type of message at the current position in the file.
 */
- (IXNMessageType)getMessageType;

/**
 * Returns the id of the message at the current position in the file or
 * \c -1 if the id isn't found in the protobuf specification.
 * \return The id of the message at the current position in the file or
 * \c -1 if the id isn't found in the protobuf specification.
 */
- (int32_t)getMessageId;

/**
 * Returns the timestamp of the message at the current position in the file.
 * \return The timestamp of the message.
 */
- (int64_t)getMessageTimestamp;

/**
 * Returns annotation data at the current position in the file.
 * \return The annotation data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \if ANDROID_ONLY
 * MessageType.ANNOTATION
 * \elseif IOS_ONLY
 * \link IXNMessageType::IXNMessageTypeAnnotation IXNMessageTypeAnnotation\endlink
 * \endif
 */
- (nonnull IXNAnnotationData *)getAnnotation;

/**
 * Returns muse configuration data at the current position in the file.
 * \return The configuration data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \if ANDROID_ONLY
 * MessageType.CONFIGURATION
 * \elseif IOS_ONLY
 * \link IXNMessageType::IXNMessageTypeConfiguration IXNMessageTypeConfiguration\endlink
 * \endif
 */
- (nullable IXNMuseConfiguration *)getConfiguration;

/**
 * Returns muse version data at the current position in the file.
 * \return The version data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \if ANDROID_ONLY
 * MessageType.VERSION
 * \elseif IOS_ONLY
 * \link IXNMessageType::IXNMessageTypeVersion IXNMessageTypeVersion\endlink
 * \endif
 */
- (nullable IXNMuseVersion *)getVersion;

/**
 * Returns computing device configuration data at the current position in the file.
 * \return The device configuration data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \if ANDROID_ONLY
 * MessageType.COMPUTING_DEVICE
 * \elseif IOS_ONLY
 * \link IXNMessageType::IXNMessageTypeComputingDevice IXNMessageTypeComputingDevice\endlink
 * \endif
 */
- (nonnull IXNComputingDeviceConfiguration *)getComputingDeviceConfiguration;

/**
 * Returns the dsp data at the current position in the file.
 * \return The dsp data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \if ANDROID_ONLY
 * MessageType.DSP
 * \elseif IOS_ONLY
 * \link IXNMessageType::IXNMessageTypeDsp IXNMessageTypeDsp\endlink
 * \endif
 */
- (nonnull IXNDspData *)getDsp;

/**
 * Returns the muse data packet data at the current position in the file.
 * Use this method to get EEG, %Accelerometer, %Battery and Quantization packets.
 * \return The muse data packet data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not one of:<br>
 * \if ANDROID_ONLY
 * MessageType.ACCELEROMETER,<br>
 * MessageType.ACC_DROPPED,<br>
 * MessageType.BATTERY,<br>
 * MessageType.EEG,<br>
 * MessageType.EEG_DROPPED,<br>
 * MessageType.GYRO,<br>
 * MessageType.MUSE_ELEMENTS or<br>
 * MessageType.QUANTIZATION
 * \elseif IOS_ONLY
 * \link IXNMessageType::IXNMessageTypeAccelerometer IXNMessageTypeAccelerometer\endlink<br>
 * \link IXNMessageType::IXNMessageTypeAccDropped IXNMessageTypeAccDropped\endlink<br>
 * \link IXNMessageType::IXNMessageTypeBattery IXNMessageTypeBattery\endlink<br>
 * \link IXNMessageType::IXNMessageTypeEeg IXNMessageTypeEeg\endlink<br>
 * \link IXNMessageType::IXNMessageTypeEegDropped IXNMessageTypeEegDropped\endlink<br>
 * \link IXNMessageType::IXNMessageTypeGyro IXNMessageTypeGyro\endlink<br>
 * \link IXNMessageType::IXNMessageTypeMuseElements IXNMessageTypeMuseElements\endlink<br>
 * \link IXNMessageType::IXNMessageTypeQuantization IXNMessageTypeQuantization\endlink<br>
 * \endif
 */
- (nullable IXNMuseDataPacket *)getDataPacket;

@end
