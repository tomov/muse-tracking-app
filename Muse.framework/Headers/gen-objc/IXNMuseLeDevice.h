// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from sdk_bridge.djinni

#import "Muse/gen-objc/IXNCharacteristicId.h"
#import "Muse/gen-objc/IXNDeviceInformation.h"
#import <Foundation/Foundation.h>
@class IXNMuseLeDeviceDelegate;

/**
 * Platform-dependent Bluetooth low-energy Muse device.
 *
 * In order to keep the platform-specific code as simple as possible, this
 * interface has fairly strict requirements on its usage that are expected to be
 * satisfied by the parts of the SDK that use it. Specifically:
 *
 * - Only one request may be outstanding at a time. I.e. you MUST NOT issue a
 *   request_disconnect after a request_connect until after you have received
 *   the did_connect or did_disconnect event corresponding to your
 *   request_connect; likewise, you MUST NOT issue a request_stop_receiving
 *   after a request_start_receiving until after you have received the
 *   did_start_receiving event corresponding to the request_start_receiving.
 *   This also applies to characteristic writes: only one write may be in
 *   progress at a time.
 *
 * - request_connect MUST NOT be called if the device is already connected.
 *   request_disconnect MUST NOT be called if the device is already
 *   disconnected. (Devices shall be assumed to start disconnected and to
 *   transition between disconnected and connected only on receiving a
 *   did_connect or did_disconnect event.)
 *
 * - request_start_receiving MUST NOT be called until after a did_connect event
 *   and before a did_disconnect event.
 *
 * - request_stop_receiving MUST NOT be called until after a did_start_receiving
 *   event and before a did_disconnect or did_stop_receiving event.
 *
 * - set_delegate MUST NOT be called with a null delegate.
 *
 * - set_delegate MUST be called before any other functions are called on the
 *   device. I.e., the device MAY dereference its delegate reference any time
 *   during or after a method other than set_delegate is called.
 *
 * If any of these requirements are violated, then the behaviour is
 * undefined and platform-dependent.
 *
 * This class is not thread-safe; any particular instance of it MUST live on a
 * single thread.
 *
 * The state machine for possible device states and actions is as follows:
 *
 *                      request_connect
 *    +==============+  ---------------> +------------+
 *  ->| Disconnected |/ <----------------| Connecting |
 *    +==============+   did_disconnect  +------------+
 *          ^                              | did_connect
 *          | did_disconnect               v
 *  +---------------+ request_disconnect +-----------+
 *  | Disconnecting | <------------------| Connected |
 *  +---------------+                    +-----------+
 *               request_stop_receiving / ^   ^  |
 *              v----------------------- /    |  | request_start_receiving
 *       +---------------+  -------------      \  \ +-------------+
 *       | Unregistering |/ did_stop_receiving  \  >| Registering |
 *       +---------------+   did_start_receiving \_/+-------------+
 *
 * Not shown are transitions from Connected, Writing, Registering, and
 * Unregistering to Disconnected on did_disconnect (i.e. the platform can send
 * did_disconnect at any time.)
 *
 * Characteristic receiving state is reset across connections; devices start out
 * receiving no characteristics until they are requested.
 */

@protocol IXNMuseLeDevice

/**
 * Resets the delegate.
 *
 * All events after this call are sent to the passed value instead of any
 * prior values.
 */
- (void)setDelegate:(nullable IXNMuseLeDeviceDelegate *)delegate;

/**
 * Returns the device's advertised information.
 *
 * This may change from time to time as the platform updates it with e.g.
 * new RSSI or new latest discovery time.
 */
- (nonnull IXNDeviceInformation *)getInfo;

/**
 * Request a connection.
 *
 * Results in one of did_connect or did_disconnect being called on the
 * delegate in case of success or failure.
 */
- (void)requestConnect;

/**
 * Request to start receiving characteristic updates.
 *
 * Results in did_start_receiving on the delegate. (Or did_disconnect in the
 * event that the connection didn't last long enough to see the response.)
 */
- (void)requestStartReceiving:(IXNCharacteristicId)characteristic;

/**
 * Request to stop receiving characteristic updates.
 *
 * Results in did_stop_receiving (or eventual did_disconnect) on the
 * delegate.
 */
- (void)requestStopReceiving:(IXNCharacteristicId)characteristic;

/**
 * Request to end the connection.
 *
 * Results in did_disconnect on the delegate.
 */
- (void)requestDisconnect;

/** Write a value to the specified characteristic. */
- (void)writeValueToCharacteristic:(IXNCharacteristicId)characteristic
                             value:(nonnull NSData *)value;

/**
 * Method to get the native platform OS/API levels.
 * Currently only used on Android for firmware update
 */
- (int32_t)getOsLevel;

@end
