// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from sdk_bridge.djinni

#import "Muse/gen-objc/IXNAdvertisingStats.h"
#import <Foundation/Foundation.h>
@class IXNMuse;
@protocol IXNMuseListener;

/**
 * Discovers the available %Muse headbands that this device can connect to.<br><br>
 * To connect to a headband, first call
 * \if ANDROID_ONLY
 * setMuseListener()
 * \elseif IOS_ONLY
 * ::IXNMuseManager::setMuseListener:
 * \endif
 * to receive callbacks when a headband is discovered.  Then call
 * \if ANDROID_ONLY
 * startListening().
 * \elseif IOS_ONLY
 * ::IXNMuseManager::startListening:
 * \endif
 * When
 * \if ANDROID_ONLY
 * MuseManager
 * \elseif IOS_ONLY
 * IXNMuseManager
 * \endif
 * detects a headband you will receive a
 * \if ANDROID_ONLY
 * MuseListener.museListChanged()
 * \elseif IOS_ONLY
 * ::IXNMuseListener::museListChanged:
 * \endif
 * callback.  You can then call
 * \if ANDROID_ONLY
 * getMuses()
 * \elseif IOS_ONLY
 * ::IXNMuseManager::getMuses:
 * \endif
 * followed by the appropriate function on the
 * \if ANDROID_ONLY
 * Muse
 * \elseif IOS_ONLY
 * IXNMuse
 * \endif
 * to connect to the headband.
 *
 * \if ANDROID_ONLY
 * \sa Muse
 * \sa MuseListener
 * \elseif IOS_ONLY
 * \sa IXNMuse
 * \sa IXNMuseListener
 * \endif
 */
/**
 * The default time in seconds after which a headband will be removed from the list
 * of muses if
 * \if ANDROID_ONLY
 * MuseManager
 * \elseif IOS_ONLY
 * ::IXNMuseManager
 * \endif
 * has had no contact with it.
 */
extern int64_t const IXNMuseManagerDEFAULTREMOVEFROMLISTAFTER;

@protocol IXNMuseManager

/**
 * Returns all currently available
 * \if ANDROID_ONLY
 * Muse
 * \elseif IOS_ONLY
 * IXNMuse
 * \endif
 * headbands.
 *
 * The returned list is sorted lexicographically by Muse name.
 *
 * Note that until you start listening, this list will be empty.
 * \return The list of available muses.
 */
- (nonnull NSArray *)getMuses;

/**
 * Start listening for any possible Muse devices.
 *
 * As Muses are discovered, they are added to the list returned by
 * \if ANDROID_ONLY
 * getMuses()
 * \elseif IOS_ONLY
 * ::IXNMuseManager::getMuses:
 * \endif
 *
 * Listening is a fairly heavyweight operation, so it should be disabled
 * when it is not needed, e.g. after a device has been found. Specifically,
 * you *must* call
 * \if ANDROID_ONLY
 * stopListening()
 * \elseif IOS_ONLY
 * ::IXNMuseManager::stopListening:
 * \endif
 * before you try to connect to a Muse you have previously discovered.
 * \if IOS_ONLY
 *
 * MU-01 devices are discovered as they connect to the device, either by
 * re-establishing a connection to the last iOS device they connected to, or
 * by the user connecting to them from the OS's Bluetooth settings. If they
 * go offline, they are removed from the list.
 *
 * Any already-known Muse 2014 (
 * \if ANDROID_ONLY
 * \link com.choosemuse.libmuse.MuseModel.MU_01 MU_01\endlink
 * \elseif IOS_ONLY
 * \link ::IXNMuseModel::IXNMuseModelMu01 MU_01\endlink
 * \endif
 * ) devices will be added to the list immediately;
 * others will trickle in as events are received.
 *
 * Muse 2016 (
 * \if ANDROID_ONLY
 * \link com.choosemuse.libmuse.MuseModel.MU_02 MU_02\endlink
 * \elseif IOS_ONLY
 * \link ::IXNMuseModel::IXNMuseModelMu02 MU_02\endlink
 * \endif
 * ) devices are discovered as their discovery events are passed to the
 * library from the OS.
 * \endif
 * \if ANDROID_ONLY
 *
 * You must call MuseManagerAndroid.setContext() prior to calling startListening() or
 * stopListening(), and the context should persist at least from before the
 * call to startListening() till after the call to stopListening(). An
 * application context is a good candidate for this.
 * \endif
 */
- (void)startListening;

/**
 * Stop listening for Muse devices.
 *
 * Stops receiving advertising packets or modifying the list of Muses
 * returned by
 * \if ANDROID_ONLY
 * getMuses().
 * \elseif IOS_ONLY
 * ::IXNMuseManager::getMuses:.
 * \endif
 * If this is called while not scanning, it is a no-op.
 * \if ANDROID_ONLY
 *
 * You must call MuseManagerAndroid.setContext() prior to calling startListening() or
 * stopListening(), and the context should persist at least from before the
 * call to startListening() till after the call to stopListening(). An
 * application context is a good candidate for this.
 * \endif
 */
- (void)stopListening;

/**
 * Set the listener to be notified on changes to the list of Muses.
 * \param listener The listener that will receive the callback when a
 * Muse is discovered.
 */
- (void)setMuseListener:(nullable id<IXNMuseListener>)listener;

/**
 * Return true iff the OS has its Bluetooth radio on.
 * \return \c true if the OS has its Bluetooth radio on. \c false if it
 * is off.
 */
- (BOOL)isBluetoothEnabled;

/**
 * Returns information about the advertising packets seen by LibMuse.
 * This is intended for internal usage at Interaxon and is currently
 * only implemented on Android for %Muse 2016 (
 * \if ANDROID_ONLY
 * \link com.choosemuse.libmuse.MuseModel.MU_02 MU_02\endlink
 * \elseif IOS_ONLY
 * \link ::IXNMuseModel::IXNMuseModelMu02 MU_02\endlink
 * \endif
 * ). This function does nothing on iOS.
 */
- (nonnull IXNAdvertisingStats *)getAdvertisingStats:(nullable IXNMuse *)m;

/**
 * Erases all previously stored information about advertising packets.
 * This is intended for internal usage at Interaxon and is currently
 *  only implemented %Muse 2016 (
 * \if ANDROID_ONLY
 * \link com.choosemuse.libmuse.MuseModel.MU_02 MU_02\endlink
 * \elseif IOS_ONLY
 * \link ::IXNMuseModel::IXNMuseModelMu02 MU_02\endlink
 * \endif
 * ). This function does nothing on iOS.
 */
- (void)resetAdvertisingStats;

/**
 * \if ANDROID_ONLY
 * MuseManager
 * \elseif IOS_ONLY
 * ::IXNMuseManager
 * \endif
 * will automatically remove a %Muse 2016 (
 * \if ANDROID_ONLY
 * \link com.choosemuse.libmuse.MuseModel.MU_02 MU_02\endlink
 * \elseif IOS_ONLY
 * \link ::IXNMuseModel::IXNMuseModelMu02 MU_02\endlink
 * \endif
 * ) headband from the list of Muses if it has not received some type of
 * communication from the headband within this time period.
 *
 * By default this is
 * \if ANDROID_ONLY
 * \link com.choosemuse.libmuse.MuseManager.DEFAULT_REMOVE_FROM_LIST_AFTER DEFAULT_REMOVE_FROM_LIST_AFTER\endlink
 * \elseif IOS_ONLY
 * 30 seconds
 * \endif
 * . To have %Muse 2016 (
 * \if ANDROID_ONLY
 * \link com.choosemuse.libmuse.MuseModel.MU_02 MU_02\endlink
 * \elseif IOS_ONLY
 * \link ::IXNMuseModel::IXNMuseModelMu02 MU_02\endlink
 * \endif
 * ) headbands remain in the list until the next call to
 * \if ANDROID_ONLY
 * MuseManager.startListening()
 * \elseif IOS_ONLY
 * ::IXNMuseManager::startListening:
 * \endif
 * set the time to 0.
 *
 * \param time Specified in seconds, the time to wait before removing a headband from the
 * list.  If set to 0, headbands will not be
 * removed automatically.
 */
- (void)removeFromListAfter:(int64_t)time;

@end
