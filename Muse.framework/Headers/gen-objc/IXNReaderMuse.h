// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from sdk_bridge.djinni

#import "Muse/gen-objc/IXNReaderMusePlaybackSettings.h"
#import <Foundation/Foundation.h>
@class IXNMuse;
@protocol IXNReaderListener;
@protocol IXNReaderPlaybackListener;

/**
 * A
 * \if ANDROID_ONLY
 * Muse
 * \elseif IOS_ONLY
 * IXNMuse
 * \endif
 * associated with a
 * \if ANDROID_ONLY
 * MuseFileReader
 * \elseif IOS_ONLY
 * IXNMuseFileReader
 * \endif
 *
 * This interface may be used to play back packets from a .muse file as
 * MuseDataPackets.
 *
 * \if ANDROID_ONLY
 * \sa ReaderMuseBuilder, ReaderMusePlaybackSettings
 * \elseif IOS_ONLY
 * \sa IXNReaderMuseBuilder, IXNReaderMusePlaybackSettings
 * \endif
 */

@interface IXNReaderMuse : NSObject

/**
 * Run through all packets in the file, calling each listener for each
 * packet as appropriate.
 *
 * This only works once; the file is not rewound on subsequent calls. If you
 * want to play a file again, create another
 * \if ANDROID_ONLY
 * ReaderMuse
 * \elseif IOS_ONLY
 * IXNReaderMuse
 * \endif
 *
 * deprecated Use
 * \if ANDROID_ONLY
 * playback()
 * \elseif IOS_ONLY
 * IXNReaderMuse::playback:
 * \endif
 * with the playback setting
 * \if ANDROID_ONLY
 * \link ReaderMusePlaybackSettings::AS_FAST_AS_POSSIBLE_WITH_SAVED_TIMESTAMP AS_FAST_AS_POSSIBLE_WITH_SAVED_TIMESTAMP\endlink
 * \elseif IOS_ONLY
 * \link IXNReaderMusePlaybackSettings::IXNReaderMusePlaybackSettingsAsFastAsPossibleWithSavedTimestamp
 * IXNReaderMusePlaybackSettingsAsFastAsPossibleWithSavedTimestamp\endlink
 * \endif
 * to replicate this behaviour.
 */
- (void)run;

/**
 * Run through all packets in the file, calling each listener for each
 * packet as appropriate in 1:1 timespan
 *
 *
 * This only works once; the file is not rewound on subsequent calls. If you
 * want to play a file again, create another
 * \if ANDROID_ONLY
 * ReaderMuse
 * \elseif IOS_ONLY
 * IXNReaderMuse
 * \endif
 * deprecated Use
 * \if ANDROID_ONLY
 * playback()
 * \elseif IOS_ONLY
 * IXNReaderMuse::playback:
 * \endif
 * with the playback setting
 * \if ANDROID_ONLY
 * \link ReaderMusePlaybackSettings::SIMULATED_WITH_SAVED_TIMESTAMP SIMULATED_WITH_SAVED_TIMESTAMP\endlink
 * \elseif IOS_ONLY
 * \link IXNReaderMusePlaybackSettings::IXNReaderMusePlaybackSettingsSimulatedWithSavedTimestamp
 * IXNReaderMusePlaybackSettingsSimulatedWithSavedTimestamp\endlink
 * \endif
 * to replicate this behaviour.
 */
- (void)runInRealTimespan;

/**
 * Corresponds to the timestamp field for the last packet read.
 *
 * This does not change within a given listener's body.
 *
 * \return The timestamp of the last packet read.
 */
- (int64_t)currentTime;

/**
 * Play back the
 * \if ANDROID_ONLY
 * MuseFile
 * \elseif IOS_ONLY
 * IXNMuseFile
 * \endif
 * and call each listener for each packet as appropriate.
 * <br>
 *
 * The speed of the playback is controlled by the playback settings.
 * Simulated playback settings require the
 * \if ANDROID_ONLY
 * ReaderMuse
 * \elseif IOS_ONLY
 * IXNReaderMuse
 * \endif
 * to be constructed with an
 * \if ANDROID_ONLY
 * EventLoop
 * \elseif IOS_ONLY
 * IXNEventLoop
 * \endif
 * to simulate the time between packets.  Calling playback without an
 * \if ANDROID_ONLY
 * EventLoop
 * \elseif IOS_ONLY
 * IXNEventLoop
 * \endif
 * will not playback the file and will log a warning.
 * <br>
 *
 * This only works once; the file is not rewound on subsequent calls. If you
 * want to play a file again, create another
 * \if ANDROID_ONLY
 * ReaderMuse
 * \elseif IOS_ONLY
 * IXNReaderMuse
 * \endif
 *
 * \sa
 * \if ANDROID_ONLY
 * ReaderMusePlaybackSettings
 * \elseif IOS_ONLY
 * IXNReaderMusePlaybackSettings
 * \endif
 */
- (void)playback;

/**
 * Sets the settings to use when playing back a file with this
 * \if ANDROID_ONLY
 * ReaderMuse.
 * \elseif IOS_ONLY
 * IXNReaderMuse.
 * \endif
 *
 * \param settings The settings to use for playback.
 */
- (void)setPlaybackSettings:(IXNReaderMusePlaybackSettings)settings;

/**
 * Returns the settings that will be used when playing back a file with this
 * \if ANDROID_ONLY
 * ReaderMuse.
 * \elseif IOS_ONLY
 * IXNReaderMuse.
 * \endif
 *
 * \return The settings that will be used to play back the file.
 */
- (IXNReaderMusePlaybackSettings)getPlaybackSettings;

/**
 * Set a listener to receive annotations, version, and configuration
 * packets.
 * \param listener The listener for annotation, version and configuration
 * packets.
 */
- (void)setReaderListener:(nullable id<IXNReaderListener>)listener;

/**
 * Set a listener to receive events related to playback. For example when
 * playback has finished successfully or was interrupted due to error.
 * \param listener The playback listener to receive callbacks.
 */
- (void)setPlaybackListener:(nullable id<IXNReaderPlaybackListener>)listener;

/**
 * Downcast to
 * \if ANDROID_ONLY
 * Muse
 * \elseif IOS_ONLY
 * IXNMuse
 * \endif
 *
 * Note that most of the API of the returned Muse is stubbed and will cause
 * assert failures if called in debug mode. The methods that are implemented
 * are:
 *   - isLowEnergy
 *   - register*
 *   - unregister*<br>
 *
 * Note that the only listener that will ever receive packets from a
 * \if ANDROID_ONLY
 * ReaderMuse is MuseDataListener.
 * \elseif IOS_ONLY
 * ::IXNReaderMuse is ::IXNMuseDataListener.
 * \endif
 */
- (nullable IXNMuse *)asMuse;

@end
